// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/nimbodex/microservices-factory/order/internal/client"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// InventoryClient is an autogenerated mock type for the InventoryClient type
type InventoryClient struct {
	mock.Mock
}

// GetPart provides a mock function with given fields: ctx, partUUID
func (_m *InventoryClient) GetPart(ctx context.Context, partUUID uuid.UUID) (*client.Part, error) {
	ret := _m.Called(ctx, partUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetPart")
	}

	var r0 *client.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*client.Part, error)); ok {
		return rf(ctx, partUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *client.Part); ok {
		r0 = rf(ctx, partUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, partUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParts provides a mock function with given fields: ctx, limit, offset
func (_m *InventoryClient) ListParts(ctx context.Context, limit int, offset int) ([]*client.Part, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 []*client.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*client.Part, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*client.Part); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInventoryClient creates a new instance of InventoryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryClient {
	mock := &InventoryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
