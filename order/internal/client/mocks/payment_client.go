// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/nimbodex/microservices-factory/order/internal/client"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PaymentClient is an autogenerated mock type for the PaymentClient type
type PaymentClient struct {
	mock.Mock
}

// PayOrder provides a mock function with given fields: ctx, orderUUID, paymentMethod
func (_m *PaymentClient) PayOrder(ctx context.Context, orderUUID uuid.UUID, paymentMethod client.PaymentMethod) (*client.PaymentResult, error) {
	ret := _m.Called(ctx, orderUUID, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 *client.PaymentResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, client.PaymentMethod) (*client.PaymentResult, error)); ok {
		return rf(ctx, orderUUID, paymentMethod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, client.PaymentMethod) *client.PaymentResult); ok {
		r0 = rf(ctx, orderUUID, paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PaymentResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, client.PaymentMethod) error); ok {
		r1 = rf(ctx, orderUUID, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentClient creates a new instance of PaymentClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentClient {
	mock := &PaymentClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
