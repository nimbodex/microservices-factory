version: '3.8'

services:
  notification:
    build:
      context: ../../../
      dockerfile: deploy/docker/notification/Dockerfile
    container_name: microservices-notification
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka:9092}
      - ORDER_PAID_CONSUMER_GROUP_ID=${ORDER_PAID_CONSUMER_GROUP_ID:-notification-service}
      - ORDER_PAID_CONSUMER_TOPICS=${ORDER_PAID_CONSUMER_TOPICS:-order.paid}
      - ORDER_ASSEMBLED_CONSUMER_GROUP_ID=${ORDER_ASSEMBLED_CONSUMER_GROUP_ID:-notification-service}
      - ORDER_ASSEMBLED_CONSUMER_TOPICS=${ORDER_ASSEMBLED_CONSUMER_TOPICS:-ship.assembled}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-123456789}
    depends_on:
      - kafka
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: microservices-kafka
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    networks:
      - microservices-network

volumes:
  kafka_data:

networks:
  microservices-network:
    driver: bridge
